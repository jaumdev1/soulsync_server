// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using soulsync.Persistence;

#nullable disable

namespace soulsync.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("soulsync.Domain.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("soulsync.Domain.Playground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdministradorPrincipalId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorPrincipalId");

                    b.ToTable("Playgrounds");
                });

            modelBuilder.Entity("soulsync.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("soulsync.Domain.UsuarioPlayground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosPlayground");
                });

            modelBuilder.Entity("soulsync.Domain.Administrador", b =>
                {
                    b.HasOne("soulsync.Domain.Playground", "Playground")
                        .WithMany("Administradores")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("soulsync.Domain.Usuario", "Usuario")
                        .WithMany("Administradores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("soulsync.Domain.Playground", b =>
                {
                    b.HasOne("soulsync.Domain.Usuario", "AdministradorPrincipal")
                        .WithMany()
                        .HasForeignKey("AdministradorPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministradorPrincipal");
                });

            modelBuilder.Entity("soulsync.Domain.UsuarioPlayground", b =>
                {
                    b.HasOne("soulsync.Domain.Playground", "Playground")
                        .WithMany("UsuariosPlayground")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("soulsync.Domain.Usuario", "Usuario")
                        .WithMany("UsuariosPlayground")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("soulsync.Domain.Playground", b =>
                {
                    b.Navigation("Administradores");

                    b.Navigation("UsuariosPlayground");
                });

            modelBuilder.Entity("soulsync.Domain.Usuario", b =>
                {
                    b.Navigation("Administradores");

                    b.Navigation("UsuariosPlayground");
                });
#pragma warning restore 612, 618
        }
    }
}
